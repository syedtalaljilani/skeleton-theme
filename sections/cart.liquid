{% comment %}
  This section is used in the cart template to render /cart page with an
  overview of the items in customer's cart.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/cart
{% endcomment %}

{%- style -%}
  .cart {
    padding: 2rem 0;
    max-width: 1000px;
    margin: 0 auto;
  }

  .cart__header {
    margin-bottom: 3rem;
    text-align: center;
  }

  .cart__title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .cart__empty {
    text-align: center;
    padding: 4rem 0;
  }

  .cart__empty-text {
    margin-bottom: 2rem;
    font-size: 1.25rem;
    color: #666;
  }

  .cart__items {
    margin-bottom: 3rem;
  }

  .cart-item {
    display: grid;
    grid-template-columns: 120px 1fr auto;
    gap: 2rem;
    padding: 2rem 0;
    border-bottom: 1px solid #eee;
  }

  .cart-item:last-child {
    border-bottom: none;
  }

  .cart-item__image-wrapper {
    position: relative;
    width: 120px;
    height: 120px;
    background: #f8f8f8;
    border-radius: 4px;
    overflow: hidden;
  }

  .cart-item__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    transition: transform 0.3s ease;
  }

  .cart-item__image:hover {
    transform: scale(1.05);
  }

  .cart-item__content {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .cart-item__title {
    font-size: 1.25rem;
    font-weight: 500;
    margin-bottom: 0.75rem;
  }

  .cart-item__title a {
    color: #000;
    text-decoration: none;
  }

  .cart-item__title a:hover {
    color: #666;
  }

  .cart-item__remove {
    color: #666;
    text-decoration: none;
    font-size: 0.875rem;
    transition: color 0.2s ease;
  }

  .cart-item__remove:hover {
    color: #000;
  }

  .cart-item__quantity {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .quantity-adjuster {
    display: flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
  }

  .quantity-button {
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f8f8f8;
    border: none;
    cursor: pointer;
    font-size: 1.25rem;
    transition: all 0.2s ease;
  }

  .quantity-button:hover {
    background: #eee;
  }

  .quantity-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .cart-item__quantity-input {
    width: 50px;
    height: 36px;
    padding: 0;
    border: none;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
    text-align: center;
    font-size: 1rem;
    -moz-appearance: textfield;
  }

  .cart-item__quantity-input::-webkit-outer-spin-button,
  .cart-item__quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .cart-item__price {
    font-size: 1.25rem;
    font-weight: 500;
    text-align: right;
  }

  .cart__footer {
    background: #f8f8f8;
    padding: 2.5rem;
    border-radius: 8px;
  }

  .cart__subtotal {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1.5rem;
    font-size: 1.25rem;
    font-weight: 500;
  }

  .cart__checkout {
    width: 100%;
    padding: 1.25rem;
    background: #000;
    color: #fff;
    border: none;
    border-radius: 4px;
    font-size: 1.125rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .cart__checkout:hover {
    background: #333;
    transform: translateY(-1px);
  }

  .cart__continue {
    display: block;
    text-align: center;
    margin-top: 1.5rem;
    color: #666;
    text-decoration: none;
    font-size: 1rem;
    transition: color 0.2s ease;
  }

  .cart__continue:hover {
    color: #000;
  }

  @media (max-width: 768px) {
    .cart {
      padding: 1rem;
    }

    .cart__title {
      font-size: 2rem;
    }

    .cart-item {
      grid-template-columns: 100px 1fr;
      gap: 1.5rem;
      padding: 1.5rem 0;
    }

    .cart-item__image-wrapper {
      width: 100px;
      height: 100px;
    }

    .cart-item__quantity {
      grid-column: 1 / -1;
      justify-content: flex-start;
      margin-top: 1rem;
    }

    .cart-item__price {
      grid-column: 1 / -1;
      text-align: left;
      margin-top: 1rem;
    }

    .cart__footer {
      padding: 1.5rem;
    }
  }
{%- endstyle -%}

<div class="cart">
  <div class="container">
    <div class="cart__header">
      <h1 class="cart__title">{{ 'cart.title' | t }}</h1>
    </div>

    {% if cart.item_count > 0 %}
      <form action="{{ routes.cart_url }}" method="post" class="cart__form" data-cart-form>
        <div class="cart__items">
          {% for item in cart.items %}
            <div class="cart-item" data-cart-item data-item-key="{{ item.key }}">
              <div class="cart-item__image-wrapper">
                {% if item.image %}
                  <img 
                    src="{{ item.image | img_url: '240x' }}"
                    alt="{{ item.title | escape }}"
                    class="cart-item__image"
                    loading="lazy"
                    width="120"
                    height="120"
                  >
                {% else %}
                  {{ 'product-1' | placeholder_svg_tag: 'cart-item__image' }}
                {% endif %}
              </div>
              
              <div class="cart-item__content">
                <div>
                  <h2 class="cart-item__title">
                    <a href="{{ item.url }}">{{ item.product.title }}</a>
                  </h2>
                  <a href="{{ item.url_to_remove }}" class="cart-item__remove" data-remove-item>
                    {{ 'cart.remove' | t }}
                  </a>
                </div>

                <div class="cart-item__quantity">
                  <div class="quantity-adjuster">
                    <button type="button" class="quantity-button" data-quantity-minus>-</button>
                    <input
                      type="number"
                      name="updates[]"
                      value="{{ item.quantity }}"
                      min="1"
                      class="cart-item__quantity-input"
                      data-quantity-input
                    >
                    <button type="button" class="quantity-button" data-quantity-plus>+</button>
                  </div>
                </div>
              </div>

              <div class="cart-item__price" data-item-price>
                {{ item.final_line_price | money_with_currency }}
              </div>
            </div>
          {% endfor %}
        </div>

        <div class="cart__footer">
          <div class="cart__subtotal">
            <span>{{ 'cart.subtotal' | t }}</span>
            <span data-cart-subtotal>{{ cart.total_price | money_with_currency }}</span>
          </div>

          <button type="submit" name="checkout" class="cart__checkout">
            {{ 'cart.checkout' | t }}
          </button>

          <a href="/collections/all" class="cart__continue">
            {{ 'cart.continue_shopping' | t }}
          </a>
        </div>
      </form>
    {% else %}
      <div class="cart__empty">
        <p class="cart__empty-text">{{ 'cart.empty' | t }}</p>
        <a href="/collections/all" class="cart__continue">
          {{ 'cart.continue_shopping' | t }}
        </a>
      </div>
    {% endif %}
  </div>
</div>

<script>
  class Cart {
    constructor() {
      this.form = document.querySelector('[data-cart-form]');
      if (!this.form) return;

      this.items = this.form.querySelectorAll('[data-cart-item]');
      this.subtotal = this.form.querySelector('[data-cart-subtotal]');
      
      this.init();
    }

    init() {
      this.items.forEach(item => {
        const minusButton = item.querySelector('[data-quantity-minus]');
        const plusButton = item.querySelector('[data-quantity-plus]');
        const input = item.querySelector('[data-quantity-input]');
        const removeButton = item.querySelector('[data-remove-item]');

        minusButton?.addEventListener('click', () => this.updateQuantity(item, -1));
        plusButton?.addEventListener('click', () => this.updateQuantity(item, 1));
        input?.addEventListener('change', () => this.updateCart());
        removeButton?.addEventListener('click', (e) => this.removeItem(e, item));
      });
    }

    async updateQuantity(item, change) {
      const input = item.querySelector('[data-quantity-input]');
      const newValue = parseInt(input.value) + change;
      
      if (newValue < 1) return;
      
      input.value = newValue;
      await this.updateCart();
      
      // Add a small delay before refresh to ensure cart update is complete
      setTimeout(() => {
        window.location.reload();
      }, 100);
    }

    async updateCart() {
      const formData = new FormData(this.form);
      
      try {
        const response = await fetch(window.Shopify.routes.root + 'cart/update.js', {
          method: 'POST',
          body: formData
        });
        
        const cart = await response.json();
        this.updateCartUI(cart);
        
        // Dispatch cart update event
        document.dispatchEvent(new CustomEvent('cart:updated', {
          detail: {
            item_count: cart.item_count
          }
        }));
      } catch (error) {
        console.error('Error updating cart:', error);
      }
    }

    async removeItem(e, item) {
      e.preventDefault();
      
      try {
        const response = await fetch(window.Shopify.routes.root + 'cart/change.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            id: item.dataset.itemKey,
            quantity: 0
          })
        });
        
        const cart = await response.json();
        this.updateCartUI(cart);
        item.remove();
        
        if (cart.item_count === 0) {
          window.location.reload();
        }
      } catch (error) {
        console.error('Error removing item:', error);
      }
    }

    updateCartUI(cart) {
      // Update subtotal
      if (this.subtotal) {
        this.subtotal.textContent = this.formatMoney(cart.total_price);
      }

      // Update item prices
      this.items.forEach(item => {
        const input = item.querySelector('[data-quantity-input]');
        const price = item.querySelector('[data-item-price]');
        const itemKey = item.dataset.itemKey;
        
        const cartItem = cart.items.find(item => item.key === itemKey);
        if (cartItem && price) {
          price.textContent = this.formatMoney(cartItem.final_line_price);
        }
      });
    }

    formatMoney(cents) {
      return (cents / 100).toLocaleString('en-US', {
        style: 'currency',
        currency: window.Shopify.currency.active || 'USD'
      });
    }
  }

  new Cart();
</script>

{% schema %}
{
  "name": "Cart",
  "settings": []
}
{% endschema %}
