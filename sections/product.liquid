{% comment %}
  This section is used in the product template to render product page with
  media, content, and add-to-cart form.

  https://shopify.dev/docs/storefronts/themes/architecture/templates/product
{% endcomment %}

{%- style -%}
  .product {
    padding: 2rem 0;
    max-width: 1400px;
    margin: 0 auto;
    margin-top: 80px;
  }

  .product__grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: start;
  }

  .product__gallery {
    position: sticky;
    top: 2rem;
  }

  .product__main-image-wrapper {
    position: relative;
    width: 100%;
    margin-bottom: 1rem;
    border-radius: 8px;
    overflow: hidden;
    background: #f8f8f8;
  }

  .product__main-image {
    width: 100%;
    aspect-ratio: 1;
    object-fit: cover;
    display: block;
    transition: transform 0.3s ease;
  }

  .product__main-image:hover {
    transform: scale(1.05);
  }

  .product__thumbnails {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
    gap: 1rem;
  }

  .product__thumbnail-wrapper {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
    border-radius: 4px;
    overflow: hidden;
    cursor: pointer;
    background: #f8f8f8;
  }

  .product__thumbnail {
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0.6;
    transition: all 0.3s ease;
  }

  .product__thumbnail:hover,
  .product__thumbnail.active {
    opacity: 1;
  }

  .product__gallery-nav {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    display: flex;
    justify-content: space-between;
    padding: 0 1rem;
    pointer-events: none;
  }

  .product__gallery-button {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.9);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    pointer-events: auto;
    transition: all 0.2s ease;
  }

  .product__gallery-button:hover {
    background: #fff;
    transform: scale(1.1);
  }

  .product__gallery-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .product__gallery-button svg {
    width: 20px;
    height: 20px;
  }

  .product__zoom {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.9);
    z-index: 1000;
    display: none;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }

  .product__zoom.active {
    display: flex;
  }

  .product__zoom-image {
    max-width: 90%;
    max-height: 90vh;
    object-fit: contain;
  }

  .product__zoom-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #fff;
    border: none;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .product__zoom-close:hover {
    transform: scale(1.1);
  }

  .product__zoom-close svg {
    width: 20px;
    height: 20px;
  }

  .product__info {
    padding-top: 2rem;
  }

  .product__title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }

  .product__price {
    font-size: 1.5rem;
    font-weight: 500;
    margin-bottom: 2rem;
  }

  .product__description {
    font-size: 1.125rem;
    line-height: 1.6;
    color: #666;
    margin-bottom: 2rem;
  }

  .product__form {
    margin-bottom: 2rem;
  }

  .product__options {
    margin-bottom: 1.5rem;
  }

  .product__option {
    margin-bottom: 1rem;
  }

  .product__option-label {
    display: block;
    font-weight: 500;
    margin-bottom: 0.5rem;
  }

  .product__option-select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    background: #fff;
  }

  .product__quantity {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .product__quantity-label {
    font-weight: 500;
  }

  .quantity-adjuster {
    display: flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
  }

  .quantity-button {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #f8f8f8;
    border: none;
    cursor: pointer;
    font-size: 1.25rem;
    transition: all 0.2s ease;
  }

  .quantity-button:hover {
    background: #eee;
  }

  .quantity-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .product__quantity-input {
    width: 60px;
    height: 40px;
    padding: 0;
    border: none;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
    text-align: center;
    font-size: 1rem;
    -moz-appearance: textfield;
  }

  .product__quantity-input::-webkit-outer-spin-button,
  .product__quantity-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .product__submit {
    width: 100%;
    padding: 1.25rem;
    background: #000;
    color: #fff;
    border: none;
    border-radius: 4px;
    font-size: 1.125rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .product__submit:hover {
    background: #333;
    transform: translateY(-1px);
  }

  .product__submit:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .product__payment-button {
    margin-top: 1rem;
  }

  @media (max-width: 768px) {
    .product {
      padding: 1rem;
      margin-top: 60px;
    }

    .product__grid {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .product__gallery {
      position: static;
    }

    .product__title {
      font-size: 2rem;
    }

    .product__price {
      font-size: 1.25rem;
    }
  }
{%- endstyle -%}

<div class="product">
  <div class="product__grid">
    <div class="product__gallery">
      <div class="product__main-image-wrapper">
        {% render 'image',
          image: product.featured_image,
          class: 'product__main-image',
          width: 800,
          height: 800,
          id: 'ProductMainImage',
          srcset: true,
          sizes: '(min-width: 768px) 50vw, 100vw'
        %}
        <div class="product__gallery-nav">
          <button class="product__gallery-button" data-gallery-prev disabled>
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M15 18l-6-6 6-6"/>
            </svg>
          </button>
          <button class="product__gallery-button" data-gallery-next>
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9 18l6-6-6-6"/>
            </svg>
          </button>
        </div>
      </div>
      
      {% if product.images.size > 1 %}
        <div class="product__thumbnails">
          {% for image in product.images %}
            <div class="product__thumbnail-wrapper">
              {% render 'image',
                image: image,
                class: 'product__thumbnail' | append: forloop.first | append: ' active',
                width: 200,
                height: 200,
                data_thumbnail: true
              %}
            </div>
          {% endfor %}
        </div>
      {% endif %}
    </div>

    <div class="product__info">
      <h1 class="product__title">{{ product.title }}</h1>
      
      <div class="product__price" data-price>
        {{ product.selected_or_first_available_variant.price | money_with_currency }}
      </div>

      <div class="product__description">
        {{ product.description }}
      </div>

      {% form 'product', product, class: 'product__form', data-product-form: '' %}
        <div class="product__options">
          {% for option in product.options_with_values %}
            <div class="product__option">
              <label class="product__option-label" for="Option{{ option.position }}">
                {{ option.name }}
              </label>
              <select
                id="Option{{ option.position }}"
                class="product__option-select"
                name="options[{{ option.name | escape }}]"
                data-option-select
              >
                {% for value in option.values %}
                  <option
                    value="{{ value | escape }}"
                    {% if option.selected_value == value %}
                      selected="selected"
                    {% endif %}
                  >
                    {{ value }}
                  </option>
                {% endfor %}
              </select>
            </div>
          {% endfor %}
        </div>

        <div class="product__quantity">
          <span class="product__quantity-label">Quantity</span>
          <div class="quantity-adjuster">
            <button type="button" class="quantity-button" data-quantity-minus>-</button>
            <input
              type="number"
              name="quantity"
              value="1"
              min="1"
              class="product__quantity-input"
              data-quantity-input
            >
            <button type="button" class="quantity-button" data-quantity-plus>+</button>
          </div>
        </div>

        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" data-variant-id>

        <button
          type="submit"
          class="product__submit"
          data-add-to-cart
          {% unless product.available %}
            disabled
          {% endunless %}
        >
          {% if product.available %}
            Add to Cart
          {% else %}
            Sold Out
          {% endif %}
        </button>

        {{ form | payment_button }}
      {% endform %}
    </div>
  </div>
</div>

<div class="product__zoom" data-zoom>
  <img src="" alt="" class="product__zoom-image" data-zoom-image>
  <button class="product__zoom-close" data-zoom-close>
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <line x1="18" y1="6" x2="6" y2="18"></line>
      <line x1="6" y1="6" x2="18" y2="18"></line>
    </svg>
  </button>
</div>

<script>
  class Product {
    constructor() {
      this.form = document.querySelector('[data-product-form]');
      if (!this.form) return;

      this.mainImage = document.getElementById('ProductMainImage');
      this.thumbnails = document.querySelectorAll('[data-thumbnail]');
      this.variantId = this.form.querySelector('[data-variant-id]');
      this.price = document.querySelector('[data-price]');
      this.optionSelects = this.form.querySelectorAll('[data-option-select]');
      this.quantityInput = this.form.querySelector('[data-quantity-input]');
      this.minusButton = this.form.querySelector('[data-quantity-minus]');
      this.plusButton = this.form.querySelector('[data-quantity-plus]');
      
      // Gallery elements
      this.galleryPrev = document.querySelector('[data-gallery-prev]');
      this.galleryNext = document.querySelector('[data-gallery-next]');
      this.zoom = document.querySelector('[data-zoom]');
      this.zoomImage = document.querySelector('[data-zoom-image]');
      this.zoomClose = document.querySelector('[data-zoom-close]');
      
      this.currentImageIndex = 0;
      this.images = Array.from(this.thumbnails);
      
      this.init();
    }

    init() {
      // Initialize thumbnails
      this.thumbnails.forEach((thumbnail, index) => {
        thumbnail.addEventListener('click', () => this.updateMainImage(index));
      });

      // Initialize gallery navigation
      this.galleryPrev?.addEventListener('click', () => this.navigateGallery(-1));
      this.galleryNext?.addEventListener('click', () => this.navigateGallery(1));

      // Initialize zoom
      this.mainImage?.addEventListener('click', () => this.openZoom());
      this.zoomClose?.addEventListener('click', () => this.closeZoom());

      // Initialize quantity adjuster
      this.minusButton?.addEventListener('click', () => this.updateQuantity(-1));
      this.plusButton?.addEventListener('click', () => this.updateQuantity(1));
      this.quantityInput?.addEventListener('change', () => this.validateQuantity());

      // Initialize variant selection
      this.optionSelects.forEach(select => {
        select.addEventListener('change', () => this.updateVariant());
      });

      // Initialize keyboard navigation
      document.addEventListener('keydown', (e) => this.handleKeyboard(e));
    }

    updateMainImage(index) {
      if (index < 0 || index >= this.images.length) return;
      
      this.currentImageIndex = index;
      const image = this.images[index];
      
      if (this.mainImage) {
        this.mainImage.src = image.src.replace('200x', '800x');
        this.thumbnails.forEach(t => t.classList.remove('active'));
        image.classList.add('active');
      }

      this.updateGalleryNav();
    }

    navigateGallery(direction) {
      const newIndex = this.currentImageIndex + direction;
      this.updateMainImage(newIndex);
    }

    updateGalleryNav() {
      if (this.galleryPrev) {
        this.galleryPrev.disabled = this.currentImageIndex === 0;
      }
      if (this.galleryNext) {
        this.galleryNext.disabled = this.currentImageIndex === this.images.length - 1;
      }
    }

    openZoom() {
      if (!this.zoom || !this.zoomImage || !this.mainImage) return;
      
      this.zoomImage.src = this.mainImage.src;
      this.zoom.classList.add('active');
      document.body.style.overflow = 'hidden';
    }

    closeZoom() {
      if (!this.zoom) return;
      
      this.zoom.classList.remove('active');
      document.body.style.overflow = '';
    }

    handleKeyboard(e) {
      if (this.zoom?.classList.contains('active')) {
        if (e.key === 'Escape') {
          this.closeZoom();
        } else if (e.key === 'ArrowLeft') {
          this.navigateGallery(-1);
        } else if (e.key === 'ArrowRight') {
          this.navigateGallery(1);
        }
      }
    }

    updateQuantity(change) {
      if (!this.quantityInput) return;
      
      const newValue = parseInt(this.quantityInput.value) + change;
      if (newValue < 1) return;
      
      this.quantityInput.value = newValue;
    }

    validateQuantity() {
      if (!this.quantityInput) return;
      
      const value = parseInt(this.quantityInput.value);
      if (value < 1) {
        this.quantityInput.value = 1;
      }
    }

    async updateVariant() {
      const selectedOptions = Array.from(this.optionSelects).map(select => select.value);
      
      try {
        const response = await fetch(`${window.Shopify.routes.root}variants/{{ product.id }}.js`);
        const variants = await response.json();
        
        const variant = variants.find(v => {
          return v.options.every((option, index) => option === selectedOptions[index]);
        });

        if (variant) {
          this.variantId.value = variant.id;
          this.price.textContent = this.formatMoney(variant.price);
          
          const submitButton = this.form.querySelector('[data-add-to-cart]');
          if (submitButton) {
            submitButton.disabled = !variant.available;
            submitButton.textContent = variant.available ? 'Add to Cart' : 'Sold Out';
          }
        }
      } catch (error) {
        console.error('Error updating variant:', error);
      }
    }

    formatMoney(cents) {
      return (cents / 100).toLocaleString('en-US', {
        style: 'currency',
        currency: window.Shopify.currency.active || 'USD'
      });
    }
  }

  new Product();
</script>

{% schema %}
{
  "name": "Product",
  "settings": []
}
{% endschema %}
